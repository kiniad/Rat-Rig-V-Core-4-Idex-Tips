
[gcode_macro RatOS]
variable_runout_park_in: "front"     		# back|front|center = gantry parking position if a runout or clog has been detected
variable_enable_unload_tip_forming: False 	# true|false = enable filament tip forming during unloading
# variable_runout_park_x: 50         		# float = if configured the x position of the toolhead. if not configured it will park in the middle
variable_filament_unload_length: 150 


#####
# LOAD FILAMENT ENTRY POINTS
#####
[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
variable_ignore_min_extrude_temp: True                # needed for fluidd
gcode:
    {% set line = '"Toolhead options 0 = left, 1 = right toolhead, current = currently activated toolhead"' %}
	CONSOLE_ECHO TITLE="INFO" MSG={line}
	_LEARN_MORE_FILAMENT
	
	# parameter
	{% set temp = params.TEMP|default(230)|int %}
	{% set this_toolhead = params.TOOLHEAD|default('current')|string %}
    
	{% set filament_name = params._NAME|default('')|string %}
	{% set filament_type = params._TYPE|default('')|string %}
	{% if filament_name == '' or filament_type == '' %}
		{% set filament_name = 'unknown' %}
		{% set filament_type = 'unknown' %}
	{% endif %}

    {% if this_toolhead == 'current' %}
      {% set toolhead = 0 if printer.toolhead.extruder == 'extruder' else 1 %}
    {% else %}
      {% set toolhead = this_toolhead|int %}
    {% endif %}

    T{toolhead}

	{% if printer["dual_carriage"] is not defined %}
		_DEFAULT_LOAD_FILAMENT TEMP={temp} NAME={filament_name} TYPE={filament_type}
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			# {% set toolhead = toolhead %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Loading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					# {% set toolhead = toolhead %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead==0 or toolhead==1 %}
			_IDEX_LOAD_FILAMENT TEMP={temp} TOOLHEAD={toolhead} NAME={filament_name} TYPE={filament_type}
		{% else %}
			RATOS_ECHO MSG="Please select x toolhead! 0 = left, 1 = right toolhead"
		{% endif %}
	{% endif %}
  
#####
# UNLOAD FILAMENT ENTRY POINTS
#####
[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
variable_ignore_min_extrude_temp: True                # needed for fluidd
gcode:
    {% set line = '"Toolhead options 0 = left, 1 = right toolhead, current = currently activated toolhead"' %}
	CONSOLE_ECHO TITLE="INFO" MSG={line}
	_LEARN_MORE_FILAMENT

	# parameter
	{% set temp = params.TEMP|default(230)|int %}
    {% set this_toolhead = params.TOOLHEAD|default('current')|string %}
	{% set filament_name = params._NAME|default('')|string %}
	{% set filament_type = params._TYPE|default('')|string %}

    {% if this_toolhead == 'current' %}
      {% set toolhead = 0 if printer.toolhead.extruder == 'extruder' else 1 %}
    {% else %}
      {% set toolhead = this_toolhead|int %}
    {% endif %}

    T{toolhead}

	{% if printer["dual_carriage"] is not defined %}
		_DEFAULT_UNLOAD_FILAMENT TEMP={temp} NAME='{filament_name}' TYPE='{filament_type}'
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			# {% set toolhead = toolhead %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Unloading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					# {% set toolhead = toolhead %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead==0 or toolhead==1 %}
			_IDEX_UNLOAD_FILAMENT TEMP={temp} TOOLHEAD={toolhead} NAME='{filament_name}' TYPE='{filament_type}'
		{% else %}
			RATOS_ECHO MSG="Please select toolhead! 0 = left, 1 = right toolhead"
		{% endif %}
	{% endif %}
  
[gcode_macro COLD_PULL]
description: Automated hotend cold pull.
gcode:
    {% set line = '"Toolhead options 0 = left, 1 = right toolhead, current = currently activated toolhead"' %}
	CONSOLE_ECHO TITLE="INFO" MSG={line}

	# parameter
	{% set extrusion_temp = params.EXTRUSION_TEMP|default(220)|int %}
	{% set cold_pull_temp = params.COLD_PULL_TEMP|default(80)|int %}
    {% set this_toolhead = params.TOOLHEAD|default('current')|string %}
    
    {% if this_toolhead == 'current' %}
      {% set toolhead = 0 if printer.toolhead.extruder == 'extruder' else 1 %}
    {% else %}
      {% set toolhead = this_toolhead|int %}
    {% endif %}

    T{toolhead}

	{% if printer["dual_carriage"] is not defined %}
		{% set toolhead = 0 %}
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			# {% set toolhead = toolhead %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Unloading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					# {% set toolhead = toolhead %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead != 0 and toolhead != 1 %}
			{action_raise_error("Please select toolhead! 0 = left, 1 = right toolhead")}
		{% endif %}
	{% endif %}

	# config
	{% set color_unknown = printer["gcode_macro RatOS"].status_color_unknown|string %}

	# visual feedback
	_LED_UNLOADING_FILAMENT TOOLHEAD={toolhead}

	# save gcode state
	SAVE_GCODE_STATE NAME=cold_pull_state

	# if printer is not homed activate the desired toolhead so the user can extrude and retract manually
	{% if "xyz" not in printer.toolhead.homed_axes %}
		_SELECT_TOOL T={toolhead} X=-1 Y=-1 TOOLSHIFT=false
	{% endif %}

	# get target extruder
	{% set target_extruder = 'extruder%s' % ('' if toolhead == 0 else toolhead) %}
    
	# activate selected extruder
	ACTIVATE_EXTRUDER EXTRUDER={target_extruder}
	RATOS_ECHO MSG="{target_extruder} activated"
    
	# heating extruder to extrusion temp
	RATOS_ECHO MSG="Heating T{toolhead} to {extrusion_temp}C... Please wait."
	SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET={extrusion_temp}
	TEMPERATURE_WAIT SENSOR={target_extruder} MINIMUM={extrusion_temp} MAXIMUM={extrusion_temp + 2}

	# wait a bit to be sure filament is completely molten
	G4 P3000

	# extrude filament
	RATOS_ECHO MSG="extruding..."
	G92 E0       # Reset extrusion distance
	G1 E30 F300  # extrude filament
	G92 E0       # Reset extrusion distance

	# cooling extruder down to cold pull temp
	RATOS_ECHO MSG="Heating T{toolhead} to {cold_pull_temp}C... Please wait."
	SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET={cold_pull_temp}
	TEMPERATURE_WAIT SENSOR={target_extruder} MINIMUM={cold_pull_temp} MAXIMUM={cold_pull_temp + 2}

	# wait a bit to be sure the cold pull temperature has been settled
	G4 P10000

	# cold pull
	RATOS_ECHO MSG="cold pull..."
	FORCE_MOVE STEPPER={target_extruder} DISTANCE=-40 VELOCITY=5 ACCEL=100

	# eject
	RATOS_ECHO MSG="eject filament..."
	FORCE_MOVE STEPPER={target_extruder} DISTANCE=-200 VELOCITY=20 ACCEL=500

	# cooling extruder down
	RATOS_ECHO MSG="cooling down extruder..."
	SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET=0

	# restore gcode state
	RESTORE_GCODE_STATE NAME=cold_pull_state

	# set filament data
	SAVE_VARIABLE VARIABLE=t{toolhead}_filament VALUE="('""', '""', 0)"
	{% if printer["gcode_macro T%s" % toolhead].filament_name is defined and printer["gcode_macro T%s" % toolhead].filament_type is defined and printer["gcode_macro T%s" % toolhead].filament_temp is defined %}
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_name VALUE='""'
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_type VALUE='""'
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_temp VALUE=0
	{% endif %}

	# update frontend
	SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=color VALUE='"{color_unknown}"'

	# visual feedback
	_LED_FILAMENT_UNLOADED TOOLHEAD={toolhead}

	# user advice
	CONSOLE_ECHO TITLE="Cold pull finished!" MSG="Please remove the filament from the PTFE tube and cut the end off. Do NOT try to load it again." TYPE="warning"

